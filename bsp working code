% Load Normal ECG Data
normal_ecg_data = readtable('ecg.csv', 'VariableNamingRule', 'preserve');
disp('Contents of Normal ECG Data:');
disp(head(normal_ecg_data));  % Display the first few rows

% Extract the ECG signal assuming it's in the first column
ecg_signal = normal_ecg_data{:, 1}; % Change this to the correct column if necessary

% Check for negative values and adjust
min_value = min(ecg_signal);
if min_value < 0
    disp(['Minimum value before adjustment: ', num2str(min_value)]);
    ecg_signal = ecg_signal + abs(min_value);  % Shift the signal upwards
    disp('Negative values found in Normal ECG data. Adjusted to remove negatives.');
end

% Define the sampling frequency
sampling_frequency = 250; % Example: adjust according to your data
dt = 1 / sampling_frequency; % Time increment
n_samples = length(ecg_signal); % Number of samples
time_vector = (0:n_samples-1) * dt; % Time vector

% Display the minimum and maximum time values
disp(['Minimum time value is: ', num2str(min(time_vector))]);
disp(['Maximum time value is: ', num2str(max(time_vector))]);

% Load Abnormal ECG Data
abnormal_ecg_data = readtable('mitbih_test.csv', 'VariableNamingRule', 'preserve');
disp('Contents of Abnormal ECG Data:');
disp(head(abnormal_ecg_data));  % Display the first few rows

% Extract the ECG signal for abnormal data
abnormal_ecg_signal = abnormal_ecg_data{:, 1}; % Adjust this if necessary

% Check for negative values in Abnormal ECG Data
if any(abnormal_ecg_signal < 0)
    warning('Abnormal ECG data contains negative values.');
end

% Define the split_data function to split the dataset into training and testing
function [train_data, test_data] = split_data(data, train_ratio)
    % Determine the number of rows to allocate for training
    num_samples = size(data, 1);
    num_train = round(num_samples * train_ratio);

    % Randomly shuffle the data
    shuffled_indices = randperm(num_samples);
    train_indices = shuffled_indices(1:num_train);
    test_indices = shuffled_indices(num_train+1:end);

    % Split the data based on the shuffled indices
    train_data = data(train_indices, :);
    test_data = data(test_indices, :);
end

% Proceed with splitting the abnormal data into training and testing sets
train_ratio = 0.8;  % 80% training, 20% testing
[abnormal_train_data, abnormal_test_data] = split_data(abnormal_ecg_data, train_ratio);
disp('Split Abnormal ECG Data into Training and Testing Sets:');
disp('Training Data Size: '); disp(size(abnormal_train_data));
disp('Testing Data Size: '); disp(size(abnormal_test_data));

% You can also split the normal ECG data if needed
[normal_train_data, normal_test_data] = split_data(normal_ecg_data, train_ratio);
disp('Split Normal ECG Data into Training and Testing Sets:');
disp('Training Data Size: '); disp(size(normal_train_data));
disp('Testing Data Size: '); disp(size(normal_test_data));

% Function to add Gaussian noise to the ECG data
function noisy_data = add_noise(ecg_data, noise_level)
    noise = noise_level * randn(size(ecg_data));  % Generate Gaussian noise
    noisy_data = ecg_data + noise;                % Add noise to the original data
end

% Set noise level (adjust as needed)
noise_level = 0.5;

% Add noise to both normal and abnormal training and testing datasets
noisy_normal_train = add_noise(normal_train_data{:, 1}, noise_level);
noisy_normal_test = add_noise(normal_test_data{:, 1}, noise_level);
noisy_abnormal_train = add_noise(abnormal_train_data{:, 1}, noise_level);
noisy_abnormal_test = add_noise(abnormal_test_data{:, 1}, noise_level);

% Display the first few samples of the noisy data for verification
disp('Noisy Normal Training Data:');
disp(noisy_normal_train(1:10));  % Display first 10 samples
disp('Noisy Abnormal Training Data:');
disp(noisy_abnormal_train(1:10));  % Display first 10 samples


function filtered_data = butterworth_highpass(data, cutoff_frequency, sampling_rate, filter_order)
    % Normalize the cutoff frequency
    Wn = cutoff_frequency / (sampling_rate / 2);  % Normalize with Nyquist frequency
    [b, a] = butter(filter_order, Wn, 'high');     % Design Butterworth filter
    filtered_data = filtfilt(b, a, data);          % Apply filter
end

% Define filter parameters
cutoff_frequency = 0.5;   % Cutoff frequency in Hz
filter_order = 4;         % Filter order

% Apply the high-pass filter to each noisy dataset
filtered_noisy_normal_train = butterworth_highpass(noisy_normal_train, cutoff_frequency, sampling_frequency, filter_order);
filtered_noisy_normal_test = butterworth_highpass(noisy_normal_test, cutoff_frequency, sampling_frequency, filter_order);
filtered_noisy_abnormal_train = butterworth_highpass(noisy_abnormal_train, cutoff_frequency, sampling_frequency, filter_order);
filtered_noisy_abnormal_test = butterworth_highpass(noisy_abnormal_test, cutoff_frequency, sampling_frequency, filter_order);

% Display the first few samples of the filtered data for verification
disp('Filtered Noisy Normal Training Data:');
disp(filtered_noisy_normal_train(1:10));  % Display first 10 samples
disp('Filtered Noisy Abnormal Training Data:');
disp(filtered_noisy_abnormal_train(1:10));  % Display first 10 samples


% Create a figure to plot the waveforms
figure;

% Plot Original Normal ECG Data
subplot(3, 2, 1);
plot(normal_train_data{:, 1});  % Adjust the column index if needed
title('Original Normal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot Noisy Normal ECG Data
subplot(3, 2, 2);
plot(noisy_normal_train);  % Noisy normal training data
title('Noisy Normal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot Filtered Noisy Normal ECG Data
subplot(3, 2, 3);
plot(filtered_noisy_normal_train);  % Filtered noisy normal training data
title('Filtered Noisy Normal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot Original Abnormal ECG Data
subplot(3, 2, 4);
plot(abnormal_train_data{:, 1});  % Adjust the column index if needed
title('Original Abnormal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot Noisy Abnormal ECG Data
subplot(3, 2, 5);
plot(noisy_abnormal_train);  % Noisy abnormal training data
title('Noisy Abnormal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot Filtered Noisy Abnormal ECG Data
subplot(3, 2, 6);
plot(filtered_noisy_abnormal_train);  % Filtered noisy abnormal training data
title('Filtered Noisy Abnormal ECG Data');
xlabel('Sample Number');
ylabel('Amplitude');

% Add an overall title
sgtitle('ECG Waveforms: Original, Noisy, and Filtered');

% Adjust figure size if needed
set(gcf, 'Position', [100, 100, 800, 600]);  % Customize figure size if necessary

% Function to extract statistical features from ECG signals
function features = extract_features(ecg_data)
    % Ensure ecg_data is a numeric array and not empty
    if isempty(ecg_data) || ~isnumeric(ecg_data)
        error('Input data must be a non-empty numeric array.');
    end

    % Flatten the data if it has multiple channels (more than one column)
    ecg_data = ecg_data(:);  % Convert to a column vector

    % Initialize the features structure
    features.mean = mean(ecg_data);
    features.std = std(ecg_data);
    features.max = max(ecg_data);
    features.min = min(ecg_data);
    features.rms = rms(ecg_data);
    features.peak_to_peak = max(ecg_data) - min(ecg_data);
end

% Extract features from filtered noisy normal and abnormal ECG
normal_features = extract_features(filtered_noisy_normal_train);
abnormal_features = extract_features(filtered_noisy_abnormal_train);

% Create a table to display the features
feature_names = {'Mean', 'Standard Deviation', 'Max', 'Min', 'RMS', 'Peak-to-Peak'};
normal_values = [normal_features.mean, normal_features.std, normal_features.max, ...
                 normal_features.min, normal_features.rms, normal_features.peak_to_peak];
abnormal_values = [abnormal_features.mean, abnormal_features.std, abnormal_features.max, ...
                   abnormal_features.min, abnormal_features.rms, abnormal_features.peak_to_peak];

% Create a table with consistent lengths
features_table = table(feature_names', normal_values', abnormal_values', ...
                       'VariableNames', {'Feature', 'Normal_ECG', 'Abnormal_ECG'});

% Display the features table
disp('Statistical Features of ECG Signals:');
disp(features_table);

% Create a bar graph for features comparison
figure;
bar([normal_values; abnormal_values]', 'grouped');
title('Statistical Features of Normal and Abnormal ECG Signals');
xlabel('Features');
ylabel('Values');
set(gca, 'XTickLabel', feature_names);
legend('Normal ECG', 'Abnormal ECG');
grid on;

% Adjust figure size if needed
set(gcf, 'Position', [100, 100, 800, 400]);  % Customize figure size if necessary

% Extract features for each sample in normal training data
num_normal_samples = size(filtered_noisy_normal_train, 1);
normal_features_matrix = zeros(num_normal_samples, 6);  % Assuming 6 features to extract

for i = 1:num_normal_samples
    normal_features_matrix(i, :) = struct2array(extract_features(filtered_noisy_normal_train(i, :)));
end

% Extract features for each sample in abnormal training data
num_abnormal_samples = size(filtered_noisy_abnormal_train, 1);
abnormal_features_matrix = zeros(num_abnormal_samples, 6);  % Assuming 6 features to extract

for i = 1:num_abnormal_samples
    abnormal_features_matrix(i, :) = struct2array(extract_features(filtered_noisy_abnormal_train(i, :)));
end

% Combine features into one matrix
combined_features = [normal_features_matrix; abnormal_features_matrix];

% Create labels for the training data
normal_labels = zeros(num_normal_samples, 1);  % Label '0' for normal
abnormal_labels = ones(num_abnormal_samples, 1); % Label '1' for abnormal

% Combine labels into one vector
labels = [normal_labels; abnormal_labels];

% Create a table for easier handling
classification_data = table(combined_features, labels);
disp('Combined Feature Data for Classification:');
disp(head(classification_data));  % Display first few rows

% Check for NaN values in the combined features
if any(isnan(combined_features), 'all')
    disp('NaN values found in combined features. Taking corrective action.');
else
    disp('No NaN values in combined features.');
end

% Replace NaN values with the mean of each column
combined_features = fillmissing(combined_features, 'movmean', 1);  % Using moving mean to fill NaN values

% Train the SVM model on the combined features and labels
svm_model = fitcsvm(combined_features, labels);
disp('SVM model trained successfully.');

% Display SVM model details
disp(svm_model);


